world <- ne_countries(scale = "medium", returnclass = "sf")
# Define a bounding box for Israel and the surrounding region
# Adjust the range of latitudes and longitudes as necessary
region_bbox <- st_bbox(c(
xmin = 33.0,  # Adjust this for more western longitude
xmax = 37.5,  # Adjust this for more eastern longitude
ymin = 29.4,  # Adjust this for more southern latitude
ymax = 33.5   # Adjust this for more northern latitude
), crs = st_crs(4326))  # WGS84 coordinate reference system
# Crop the world map to the bounding box
region <- st_crop(world, region_bbox)
# Convert df to an sf object
df_sf <- st_as_sf(df, coords = c("y", "x"), crs = 4326)
p1 <- ggplot() +
geom_sf(data = region, fill = "lightgray", color = "black") +  # Region map
geom_sf(data = df_sf, color = "red", size = 0.5, alpha = 0.4) +  # Points from df
theme_minimal() +
coord_sf(xlim = c(region_bbox$xmin, region_bbox$xmax),
ylim = c(region_bbox$ymin, region_bbox$ymax),
expand = FALSE) +
labs(title = paste0("Conflict Events in Israel"),
x = "Longitude",
y = "Latitude")
p1
w_isr <- read.csv("places_of_worship_israel.csv", sep = ",")[,-1]
colnames(w_isr) <- c("x", "y", "id")
w_isr <- w_isr[which(w_isr$id %in% unique(war$id_nearest_pow)),]
w_isr_sf <- st_as_sf(w_isr, coords = c("y", "x"), crs = 4326)
p1 + geom_sf(data = w_isr_sf, size = 0.7, alpha = 0.3, pch = 3) + labs(subtitle = "Black crosses are places of worship (only nearest to war events)")
p_isr <- read.csv("political_places_israel.csv", sep = ",")[,-1]
colnames(p_isr) <- c("x", "y", "id")
p_isr_sf <- st_as_sf(p_isr, coords = c("y", "x"), crs = 4326)
p1 + geom_sf(data = p_isr_sf, size = 0.7, alpha = 0.3, pch = 4) + labs(subtitle = "Black `x` are government places")
c_isr <- read.csv("political_places_israel.csv", sep = ",")[,-1]
colnames(c_isr) <- c("x", "y", "id")
c_isr_sf <- st_as_sf(c_isr, coords = c("y", "x"), crs = 4326)
p1 + geom_sf(data = c_isr_sf, size = 0.7, alpha = 0.25, pch = 8) + labs(subtitle = "Black `*` are military checkpoints")
########################------------############
# Carica il poligono di Israele (sf object)
conflicts_points <- data.frame(x = war$latitude, y = war$longitude)
conflicts_points <- st_as_sf(conflicts_points, coords = c("x", "y"))
# israel shapefile
israel_polygon <- st_read("israel_palestine_combined.shp")
# Trasforma il poligono in un sistema di coordinate proiettate
israel_polygon_proj <- st_transform(israel_polygon, crs = 32633)
# Trasforma i punti in un sistema di coordinate proiettate
conflicts_points_proj <- st_transform(conflicts_points, crs = 32633)
# Trasforma i punti in un sistema di coordinate proiettate
conflicts_points_proj <- st_transform(conflicts_points, crs = 32633)
# Assegna il CRS WGS84 (EPSG:4326)
st_crs(conflicts_points) <- 4326
# israel shapefile
israel_polygon <- st_read("israel_palestine_combined.shp")
# Trasforma il poligono in un sistema di coordinate proiettate
israel_polygon_proj <- st_transform(israel_polygon, crs = 32633)
# Trasforma i punti in un sistema di coordinate proiettate
conflicts_points_proj <- st_transform(conflicts_points, crs = 32633)
israel_window <- as.owin(israel_polygon_proj)
coords <- st_coordinates(conflicts_points_proj)
# Crea il processo puntuale
conflicts_ppp <- ppp(
x = coords[, 1],  # Coordinate x
y = coords[, 2],  # Coordinate y
window = israel_window  # Finestra di osservazione
)
?ppp
head(war)
########################------------############
conflicts_points <- data.frame(x = war$latitude, y = war$longitude)
conflicts_points <- st_as_sf(conflicts_points, coords = c("x", "y"))
# Assegna il CRS WGS84 (EPSG:4326)
st_crs(conflicts_points) <- 4326
# israel shapefile
israel_polygon <- st_read("israel_palestine_combined.shp")
# Trasforma il poligono in un sistema di coordinate proiettate
israel_polygon_proj <- st_transform(israel_polygon, crs = 32633)
# Trasforma i punti in un sistema di coordinate proiettate
conflicts_points_proj <- st_transform(conflicts_points, crs = 32633)
israel_window <- as.owin(israel_polygon_proj)
coords <- st_coordinates(conflicts_points_proj)
# Crea il processo puntuale
conflicts_ppp <- ppp(
x = coords[, 1],  # Coordinate x
y = coords[, 2],  # Coordinate y
window = israel_window  # Finestra di osservazione
)
israel_window$xrange
# VERSIONE DI CLAUDE
library(sf)
library(spatstat)
library(sp)
# Correct coordinate order
conflicts_points <- data.frame(x = war$longitude, y = war$latitude)
# Create SF object with correct CRS
conflicts_points_sf <- st_as_sf(conflicts_points, coords = c("x", "y"), crs = 4326)
# Read shapefile
israel_polygon <- st_read("israel_palestine_combined.shp")
# Ensure both are in the same CRS before transformation
# Check current CRS
st_crs(conflicts_points_sf)
st_crs(israel_polygon)
# Optional: Ensure both are in WGS84 if they aren't already
conflicts_points_sf <- st_transform(conflicts_points_sf, crs = st_crs(israel_polygon))
# Project to a suitable UTM zone
israel_polygon_proj <- st_transform(israel_polygon, crs = 32633)
conflicts_points_proj <- st_transform(conflicts_points_sf, crs = 32633)
# Check intersections
intersected_points <- st_intersection(conflicts_points_proj, israel_polygon_proj)
# Convert to ppp
# Convert SF to SP first, which can sometimes be more robust
conflicts_sp <- as(intersected_points, "Spatial")
# Create window
israel_window <- as.owin(israel_polygon_proj)
# Create ppp
conflicts_ppp <- ppp(
x = coordinates(conflicts_sp)[,1],
y = coordinates(conflicts_sp)[,2],
window = israel_window
)
conflicts_ppp
plot(conflicts_ppp)
########################------------############
conflicts_points <- data.frame(x = war$longitude, y = war$latitude)
conflicts_points <- st_as_sf(conflicts_points, coords = c("x", "y"))
# Assegna il CRS WGS84 (EPSG:4326)
st_crs(conflicts_points) <- 4326
# israel shapefile
israel_polygon <- st_read("israel_palestine_combined.shp")
# Trasforma il poligono in un sistema di coordinate proiettate
israel_polygon_proj <- st_transform(israel_polygon, crs = 32633)
# Trasforma i punti in un sistema di coordinate proiettate
conflicts_points_proj <- st_transform(conflicts_points, crs = 32633)
israel_window <- as.owin(israel_polygon_proj)
coords <- st_coordinates(conflicts_points_proj)
# Crea il processo puntuale
conflicts_ppp <- ppp(
x = coords[, 1],  # Coordinate x
y = coords[, 2],  # Coordinate y
window = israel_window  # Finestra di osservazione
)
plot(conflicts_ppp)
# VERSIONE DI CLAUDE
library(sf)
library(spatstat)
library(sp)
# Correct coordinate order
conflicts_points <- data.frame(x = war$longitude, y = war$latitude)
# Create SF object with correct CRS
conflicts_points_sf <- st_as_sf(conflicts_points, coords = c("x", "y"), crs = 4326)
# Read shapefile
israel_polygon <- st_read("israel_palestine_combined.shp")
# Ensure both are in the same CRS before transformation
# Check current CRS
st_crs(conflicts_points_sf)
st_crs(israel_polygon)
# Optional: Ensure both are in WGS84 if they aren't already
conflicts_points_sf <- st_transform(conflicts_points_sf, crs = st_crs(israel_polygon))
# Project to a suitable UTM zone
israel_polygon_proj <- st_transform(israel_polygon, crs = 32633)
conflicts_points_proj <- st_transform(conflicts_points_sf, crs = 32633)
# Create window
israel_window <- as.owin(israel_polygon_proj)
# Create ppp
conflicts_ppp <- ppp(
x = coordinates(conflicts_sp)[,1],
y = coordinates(conflicts_sp)[,2],
window = israel_window
)
plot(conflicts_points)
plot(conflicts_ppp)
?st_intersection
###########-------------#####
# Correct coordinate order
conflicts_points <- data.frame(x = war$longitude, y = war$latitude)
# Create SF object with correct CRS
conflicts_points_sf <- st_as_sf(conflicts_points, coords = c("x", "y"), crs = 4326)
###########-------------#####
conflicts_points <- data.frame(x = war$longitude, y = war$latitude)
# Create SF object with correct CRS
conflicts_points_sf <- st_as_sf(conflicts_points, coords = c("x", "y"), crs = 4326)
# Read shapefile
israel_polygon <- st_read("israel_palestine_combined.shp")
# Ensure both are in the same CRS before transformation
# Check current CRS
st_crs(conflicts_points_sf)
st_crs(israel_polygon)
# Optional: Ensure both are in WGS84 if they aren't already
conflicts_points_sf <- st_transform(conflicts_points_sf, crs = st_crs(israel_polygon))
# Project to a suitable UTM zone
israel_polygon_proj <- st_transform(israel_polygon, crs = 32633)
conflicts_points_proj <- st_transform(conflicts_points_sf, crs = 32633)
# Check intersections
intersected_points <- st_intersection(conflicts_points_proj, israel_polygon_proj)
# Check intersections
intersected_points <- st_intersection(conflicts_points_proj, israel_polygon_proj)
# Create window
israel_window <- as.owin(israel_polygon_proj)
# Create ppp
conflicts_ppp <- ppp(
x = coordinates(intersected_points)[,1],
y = coordinates(intersected_points)[,2],
window = israel_window
)
###########-------------#####
conflicts_points <- data.frame(x = war$longitude, y = war$latitude)
# Create SF object with correct CRS
conflicts_points_sf <- st_as_sf(conflicts_points, coords = c("x", "y"), crs = 4326)
# Read shapefile
israel_polygon <- st_read("israel_palestine_combined.shp")
# Ensure both are in the same CRS before transformation
# Check current CRS
st_crs(conflicts_points_sf)
st_crs(israel_polygon)
# Optional: Ensure both are in WGS84 if they aren't already
conflicts_points_sf <- st_transform(conflicts_points_sf, crs = st_crs(israel_polygon))
# Project to a suitable UTM zone
israel_polygon_proj <- st_transform(israel_polygon, crs = 32633)
conflicts_points_proj <- st_transform(conflicts_points_sf, crs = 32633)
# Check intersections
intersected_points <- st_intersection(conflicts_points_proj, israel_polygon_proj)
# Convert to ppp
# Convert SF to SP first, which can sometimes be more robust
conflicts_sp <- as(intersected_points, "Spatial")
# Create window
israel_window <- as.owin(israel_polygon_proj)
# Create ppp
conflicts_ppp <- ppp(
x = coordinates(conflicts_sp)[,1],
y = coordinates(conflicts_sp)[,2],
window = israel_window
)
plot(conflicts_ppp)
rm(list = ls())
# caricamento librerie
if(!require(tidyverse)) install.packages("tidyverse")
# if(!require(maps)) install.packages("maps")
# if(!require(mapproj)) install.packages("mapproj")
# if(!require(colorspace)) install.packages("colorspace")
# if(!require(latex2exp)) install.packages("latex2exp")
# if(!require(tmaptools)) install.packages("tmaptools")
# if(!require(sf)) install.packages("sf")
if(!require(stopp)) install.packages("stopp")
if(!require(spatstat)) install.packages("spatstat")
# if(!require(rnaturalearth)) install.packages("rnaturalearth")
# if(!require(rnaturalearthdata)) install.packages("rnaturalearthdata")
# caricamento dati
war <- read.csv("war.csv")
war$side_b <- factor(war$side_b)
war$adm_1 <- factor(war$adm_1)
war$event_clarity <- factor(war$event_clarity)
war$date_prec <- factor(war$date_prec)
#rmarkdown::paged_table(head(war, 10))
hist(war$event_duration, main = "Distribuzione della durata degli eventi", xlab = "durata degli eventi")
hist(war$event_duration[war$event_duration!=0], main = "Distribuzione della durata degli eventi
(tolti quelli con durata 0)", xlab = "durata degli eventi")
#distribuzione di event_clarity condizionatamente a date_prec
ggplot(data = war) +
geom_bar(mapping = aes(x = event_clarity, fill = date_prec), position = "fill")
#morti per anno
fatalities <- war |>
group_by(year) |>
summarise(fatalities_per_year = sum(best))
ggplot(fatalities, aes(x = year, y = fatalities_per_year)) +
geom_line(color = "black", linewidth = 1) +  # Linea blu
geom_point(color = "red", size = 2) + # Punti rossi per enfatizzare i dati
labs(title = "Serie Storica dei morti per Anno",
x = "Anno",
y = "Fatalità") +
theme_minimal()
#densità di event_duration condizionata a event_clarity
filtered_war <- war |>
filter(event_duration!=0)
#distribuzione di event_duration condizionata a event_clarity
ggplot(filtered_war, aes(x = event_duration, fill = event_clarity)) +
geom_bar(alpha = 0.7) +
facet_wrap(~ event_clarity)
intertimes_table <- table(war$intertimes[-1])
intertimes <- as.integer(names(intertimes_table))
n_total <- sum(intertimes_table)
abs_freq <- as.vector(intertimes_table)
rel_freq <- abs_freq/n_total
cum_freq <- cumsum(rel_freq)
surv <- (1 - cum_freq) + rel_freq
intertimes_distr <- data.frame(intertimes = intertimes, abs_freq = abs_freq,
rel_freq = rel_freq, cum_freq = cum_freq, surv = surv)
ggplot(intertimes_distr, aes(x = intertimes, y = rel_freq)) +
geom_col() + ylab("density") +
xlab("intertimes")
ggplot(intertimes_distr, aes(x = intertimes, y = cum_freq)) +
geom_point(shape = 1) +
geom_line(linewidth = 0.2) + ylab("ecdf") +
xlab("intertimes")
ggplot(intertimes_distr, aes(x = log(intertimes), y = log(surv))) +
geom_point(shape = 1) +
geom_line(linewidth = 0.2) +
ylab("log(survival function)") +
xlab("log(intertimes)") +
geom_smooth(method = "lm", se = FALSE, linewidth = 0.3, color = "red")
ggplot(war, aes(x = days_since_start, y = intertimes)) +
geom_point(pch = 1) +
geom_text(
data = subset(war, intertimes > 150), # Filtra solo i punti con y > 200
aes(label = date_start),
hjust = -0.2, vjust = c(rep(-0.5, 4), -1.1, rep(-0.5, 2)), # Per posizionare meglio il testo
size = 2.3
)
x <- war$intertimes[-1]
n <- length(x)
lambda <- 1/mean(x)
theoretical_quantiles <- qexp(ppoints(n), rate = lambda)
# Sort the observed data
sorted_data <- sort(x)
# Create the QQ plot
qqplot(theoretical_quantiles, sorted_data,
main = "QQ Plot: Exponential Fit",
xlab = "Theoretical Quantiles",
ylab = "Sample Quantiles")
abline(0, 1, col = "red")  # Add a reference line
library(MASS)
fit <- fitdistr(x, "Negative Binomial")
# Extract the estimated parameters
size <- fit$estimate["size"]  # Dispersion parameter
mu <- fit$estimate["mu"]      # Mean parameter
# Generate theoretical quantiles
n <- length(x)
theoretical_quantiles <- qnbinom(ppoints(n), size = size, mu = mu)
# Sort the observed data
sorted_data <- sort(x)
# Create the QQ plot
qqplot(theoretical_quantiles, sorted_data,
main = "QQ Plot: Negative Binomial Fit",
xlab = "Theoretical Quantiles",
ylab = "Sample Quantiles")
abline(0, 1, col = "red")  # Add a reference line
library(ggplot2)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
library(dplyr)
df <- data.frame(x = war$latitude,
y = war$longitude,
t = war$days_since_start,
side_b = war$side_b)
# Load the world map
world <- ne_countries(scale = "medium", returnclass = "sf")
# Define a bounding box for Israel and the surrounding region
# Adjust the range of latitudes and longitudes as necessary
region_bbox <- st_bbox(c(
xmin = 33.0,  # Adjust this for more western longitude
xmax = 37.5,  # Adjust this for more eastern longitude
ymin = 29.4,  # Adjust this for more southern latitude
ymax = 33.5   # Adjust this for more northern latitude
), crs = st_crs(4326))  # WGS84 coordinate reference system
# Crop the world map to the bounding box
region <- st_crop(world, region_bbox)
# Convert df to an sf object
df_sf <- st_as_sf(df, coords = c("y", "x"), crs = 4326)
# Plot the data with the map
p1 <- ggplot() +
geom_sf(data = region, fill = "lightgray", color = "black") +  # Region map
geom_sf(data = df_sf, color = "red", size = 0.5, alpha = 0.4) +  # Points from df
theme_minimal() +
coord_sf(xlim = c(region_bbox$xmin, region_bbox$xmax),
ylim = c(region_bbox$ymin, region_bbox$ymax),
expand = FALSE) +
labs(title = paste0("Conflict Events in Israel"),
x = "Longitude",
y = "Latitude")
p1
w_isr <- read.csv("places_of_worship_israel.csv", sep = ",")[,-1]
colnames(w_isr) <- c("x", "y", "id")
w_isr <- w_isr[which(w_isr$id %in% unique(war$id_nearest_pow)),]
w_isr_sf <- st_as_sf(w_isr, coords = c("y", "x"), crs = 4326)
p1 + geom_sf(data = w_isr_sf, size = 0.7, alpha = 0.3, pch = 3) + labs(subtitle = "Black crosses are places of worship (only nearest to war events)")
p_isr <- read.csv("political_places_israel.csv", sep = ",")[,-1]
colnames(p_isr) <- c("x", "y", "id")
# p_isr <- p_isr[which(p_isr$id %in% unique(war$id_nearest_pow)),]
p_isr_sf <- st_as_sf(p_isr, coords = c("y", "x"), crs = 4326)
p1 + geom_sf(data = p_isr_sf, size = 0.7, alpha = 0.3, pch = 4) + labs(subtitle = "Black `x` are government places")
c_isr <- read.csv("political_places_israel.csv", sep = ",")[,-1]
colnames(c_isr) <- c("x", "y", "id")
# c_isr <- c_isr[which(c_isr$id %in% unique(war$nearest_pow)),]
c_isr_sf <- st_as_sf(c_isr, coords = c("y", "x"), crs = 4326)
p1 + geom_sf(data = c_isr_sf, size = 0.7, alpha = 0.25, pch = 8) + labs(subtitle = "Black `*` are military checkpoints")
###########-------------#####
# Correct coordinate order
conflicts_points <- data.frame(x = war$longitude, y = war$latitude)
# Create SF object with correct CRS
conflicts_points_sf <- st_as_sf(conflicts_points, coords = c("x", "y"), crs = 4326)
# Read shapefile
israel_polygon <- st_read("israel_palestine_combined.shp")
# Ensure both are in the same CRS before transformation
# Check current CRS
st_crs(conflicts_points_sf)
st_crs(israel_polygon)
# Optional: Ensure both are in WGS84 if they aren't already
conflicts_points_sf <- st_transform(conflicts_points_sf, crs = st_crs(israel_polygon))
# Project to a suitable UTM zone
israel_polygon_proj <- st_transform(israel_polygon, crs = 32633)
conflicts_points_proj <- st_transform(conflicts_points_sf, crs = 32633)
# Check intersections
intersected_points <- st_intersection(conflicts_points_proj, israel_polygon_proj)
# Convert to ppp
# Convert SF to SP first, which can sometimes be more robust
conflicts_sp <- as(intersected_points, "Spatial")
# Create window
israel_window <- as.owin(israel_polygon_proj)
# Create ppp
conflicts_ppp <- ppp(
x = coordinates(conflicts_sp)[,1],
y = coordinates(conflicts_sp)[,2],
window = israel_window
)
plot(conflicts_ppp)
plot(density(conflicts_ppp))
conflicts_ppp
ppm(conflicts_ppp, ~ x + y)
ppm(conflicts_ppp, ~ x + y + x*y)
ppm(conflicts_ppp, ~ poly(x, 2) + poly(y, 2))
mod <- ppm(conflicts_ppp, ~ poly(x, 2) + poly(y, 2))
plot(mod)
plot(predict(mod))
plot(fitted(mod))
plot(predict(mod))
mod <- ppm(conflicts_ppp, ~ poly(x, 2)*poly(y, 2))
mod <- ppm(conflicts_ppp, ~ poly(x, 2)*poly(y, 2))
mod
summary(mod)
mod <- ppm(conflicts_ppp, ~ poly(x, 2) + poly(y, 2) + x:y)
plot(predict(mod))
summary(mod)
mod
mod <- ppm(conflicts_ppp, ~ poly(x, 2) + poly(y, 2))
summary(mod)
plot(density(conflicts_ppp))
plot(predict(mod))
plot(conflict_ppp, add = T, cex = 0.5)
plot(conflicts_ppp, add = T, cex = 0.5)
plot(conflicts_ppp, add = T, cex = 0.5, alpha = 0.5)
plot(conflicts_ppp, add = T, cex = 0.5, alpha = 0.5, cols = "white")
plot(conflicts_ppp, add = T, cex = 0.5, alpha = 0.5, cols = "red")
plot(predict(mod))
plot(conflicts_ppp, add = T, pch = ".", cex = 0.1, alpha = 0.5, cols = "red")
plot(conflicts_ppp, add = T, pch = ".", alpha = 0.5, cols = "red")
plot(conflicts_ppp, add = T, pch = ".", cex = 1.5, alpha = 0.5, cols = "red")
plot(conflicts_ppp, add = T, pch = ".", cex = 1.5, alpha = 0.1, cols = "red")
plot(conflicts_ppp, add = T, pch = ".", cex = 1.5, alpha = 0.1, cols = "green")
plot(density(conflicts_ppp))
plot(log(density(conflicts_ppp)))
plot(-log(density(conflicts_ppp)))
plot(log(density(conflicts_ppp)))
plot(sqrt(density(conflicts_ppp)))
plot(sqrt(density(conflicts_ppp))^2)
plot(sqrt(density(conflicts_ppp)))
plot(log(density(conflicts_ppp)))
plot(log(density(conflicts_ppp))^2)
plot(log(density(conflicts_ppp)))
plot(sin(density(conflicts_ppp)))
plot(cos(density(conflicts_ppp)))
plot(exp(density(conflicts_ppp)))
plot(log(density(conflicts_ppp)))
war <- read.csv("war.csv")
war$side_b <- factor(war$side_b)
war$adm_1 <- factor(war$adm_1)
war$event_clarity <- factor(war$event_clarity)
war$date_prec <- factor(war$date_prec)
rmarkdown::paged_table(head(war, 10))
###########-------------#####
# Correct coordinate order
conflicts_points <- data.frame(x = war$longitude, y = war$latitude)
# Create SF object with correct CRS
conflicts_points_sf <- st_as_sf(conflicts_points, coords = c("x", "y"), crs = 4326)
# Read shapefile
israel_polygon <- st_read("israel_palestine_combined.shp")
# Ensure both are in the same CRS before transformation
# Check current CRS
st_crs(conflicts_points_sf)
st_crs(israel_polygon)
# Optional: Ensure both are in WGS84 if they aren't already
conflicts_points_sf <- st_transform(conflicts_points_sf, crs = st_crs(israel_polygon))
# Project to a suitable UTM zone
israel_polygon_proj <- st_transform(israel_polygon, crs = 32633)
conflicts_points_proj <- st_transform(conflicts_points_sf, crs = 32633)
# Check intersections
intersected_points <- st_intersection(conflicts_points_proj, israel_polygon_proj)
# Convert to ppp
# Convert SF to SP first, which can sometimes be more robust
conflicts_sp <- as(intersected_points, "Spatial")
# Create window
israel_window <- as.owin(israel_polygon_proj)
# Create ppp
conflicts_ppp <- ppp(
x = coordinates(conflicts_sp)[,1],
y = coordinates(conflicts_sp)[,2],
window = israel_window
)
plot(conflicts_ppp)
if(!require(sp)) install.packages("sp")
# caricamento librerie
if(!require(tidyverse)) install.packages("tidyverse")
# if(!require(maps)) install.packages("maps")
# if(!require(mapproj)) install.packages("mapproj")
# if(!require(colorspace)) install.packages("colorspace")
# if(!require(latex2exp)) install.packages("latex2exp")
# if(!require(tmaptools)) install.packages("tmaptools")
if(!require(sf)) install.packages("sf")
if(!require(sp)) install.packages("sp")
if(!require(stopp)) install.packages("stopp")
if(!require(spatstat)) install.packages("spatstat")
# if(!require(rnaturalearth)) install.packages("rnaturalearth")
# if(!require(rnaturalearthdata)) install.packages("rnaturalearthdata")
rm(list = ls())
